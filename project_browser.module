<?php

// $Id$
/**
 * @file
 * Project Browser module.
 * Authored by Leighton Whiting for Google Summer of Code 2011
 * 
 * This module will provide a new UI for admins to easily browse modules and themes from their
 * admin pages, and install them.
 */

/**
 * Display help and module information
 */
function project_browser_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#project_browser":
      $output .= '<p>'.  t("Provides a UI for users to browse for and install new modules and themes from
      within their Drupal admin interface.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function project_browser_permission() {
  return array(
    'use project browser' => array(
      'title' => t('Use Project Browser'),
      'description' => t('This allows the user to browse for and install new modules and themes using Project Browser.'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function project_browser_menu() {
  $items = array();
  $items['admin/settings/project_browser'] = array(
    'title' => 'Project Browser Settings',
    'description' => 'Set the various Project Browser Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_browser_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
  );
  
  $items['admin/project_browser/modules'] = array(
    'title' => 'Modules',
    'description' => 'Browse and search for new modules',
    'page callback' => 'project_browser_page',
    'page arguments' => array('module'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK
  );
  
  $items['admin/project_browser/themes'] = array(
    'title' => 'Themes',
    'description' => 'Browse and search for new themes',
    'page callback' => 'project_browser_page',
    'page arguments' => array('theme'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_LOCAL_TASK
  );
  
  $items['admin/project_browser/install/%'] = array(
    'title' => 'Install',
    'page callback' => 'project_browser_installation_page',
    'page arguments' => array(3),
    'access arguments' => array('use project browser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'project_browser.pages.inc',
  );
  return $items;
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function project_browser_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    );
  $form['main']['project_browser_servers'] = array(
    '#type' => 'textarea',
    '#title' => t('Servers'),
    '#default_value' => variable_get('project_browser_servers', ''),
    '#description' => t("Add new servers to use for the Project Browser, one per line, in 
      the 'url|Server Name' format. Drupal.org is added by default, and doesn't need to be 
      set here."),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}

// ======================================
// Theme:
// ======================================

/**
 * Implements hook_theme() 
 */
function project_browser_theme() {
  return array(
    // Template for installation page
    'project_browser_install' => array(
      'variables' => array('current_task' => NULL, 'main_content' => NULL),
      'template' => 'project_browser_install',
    ),
    // Template for list of projects
    'project_browser_list' => array(
      'variables' => array('projects_list' => NULL),
      'template' => 'project_browser_list',
    ),
    // Template for single project
    'project_browser_project' => array(
      'variables' => array('project' => NULL),
      'template' => 'project_browser_project',
    ),
  );
}

/**
 * Add some variables for the projects install theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - projects_list : array of all projects
 */
function project_browser_preprocess_project_browser_install(&$variables) {
  // Add the themed list
  $variables['task_list'] = project_browser_installation_task_list($variables['current_task']);
}

/**
 * Add some variables for the projects list theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - projects_list : array of all projects
 */
function project_browser_preprocess_project_browser_list(&$variables) {
  // Add the themed list
  $variables['list'] = '';
  
  // Theme each individual project and add to the list
  foreach ($variables['projects_list'] as $project) {
    $variables['list'] .= theme('project_browser_project', array('project' => $project));
  }
  
  // Add the pager
  $variables['pager'] = theme('pager', array('tags' => NULL));
  
  // Add the filters
  $search_form = drupal_get_form('project_browser_text_filter_form');
  $filters = drupal_render($search_form);
  
  // Add the available category to filter on
  $category_form = drupal_get_form('project_browser_category_filter_form');
  $filters .= drupal_render($category_form); 
  
  // Add the sorting of the list
  $filters .= project_browser_sort_list();
  $variables['filters'] = $filters;
  
  // Add the install list
  $variables['install_list'] = project_browser_get_install_list();
}

/**
 * Add some variables for the project theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - project : associative array of project variables
 */
function project_browser_preprocess_project_browser_project(&$variables) {
  include_once(drupal_get_path('module', 'project_browser') . '/project_browser.inc');
  
  $project = $variables['project'];
  
  $variables['title'] = l(check_plain($project['title']), check_url($project['project_url']));
  $variables['description'] = $project['description'];
  
  // Check if the project is installed
  if (_project_browser_is_project_enabled($project['type'], $project['short_name'])) {
    $variables['status'] = '<div class="install-disabled">Already installed</div>'; 
    $variables['install'] = '';
  }
  elseif (drupal_get_filename($project['type'], $project['short_name'])) {
    $variables['status'] = '<div class="install-disabled">Already downloaded</div>';
    $variables['install'] = '';
    // TODO - We should offer a 'remove' option to delete the project from the file system
  }
  else {
    $variables['status'] = '<div class="install-enabled">Install</div>';
    $install_form = drupal_get_form('project_browser_' . $project['short_name'] . '_install_form', $project->pid);
    $variables['install'] = drupal_render($install_form);
  }
}
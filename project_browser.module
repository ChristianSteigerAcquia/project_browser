<?php

// $Id$
/**
 * @file
 * Project Browser module.
 * Authored by Leighton Whiting for Google Summer of Code 2011
 * 
 * This module provides a new UI for admins to easily browse modules and themes from their
 * admin pages, and install them.
 * 
 * TODO - Add a context to pages showing the filters currently used
 * FIXME - Figure out why some themes are showing as installed correctly but others are not
 * TODO - Combining the Install confirmation page and the Select Versions page into one page. Get rid of the Backup page for now.
 * TODO - Changing the Select Releases widget to use jquery instead of AJAX.
 * TODO - Refactoring so that each server has it's own 'results page', and a filter to let the user select which server to use. Use Secondary Tabs
 * TODO - Implementing Caches for Client.
 * TODO - Adding GET method for communicating with PBS.
 * TODO - Fixing the categories so that multiple categories are supported by drupalorg_pbs
 * TODO - Stop the site is offline message from showing on the enable page
 * TODO - Remove Active Development status
 * TODO - Move the server settings to a main configuration screen, instead of a context link
 * TODO - Make the error reporting more robust
 */

module_load_include('inc', 'project_browser', 'project_browser');

/**
 * Display help and module information
 */
function project_browser_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#project_browser":
      $output .= '<p>'.  t("Provides a UI for users to browse for and install new modules and themes from
      within their Drupal admin interface.") .'</p>';
      break;
  }
  return $output;
}

/**
 * Implementation of hook_perm().
 */
function project_browser_permission() {
  return array(
    'use project browser' => array(
      'title' => t('Use Project Browser'),
      'description' => t('This allows the user to browse for and install new modules and themes using Project Browser.'),
      'restrict access' => TRUE,
    )
  );
}

/**
 * Implementation of hook_menu().
 */
function project_browser_menu() {
  $items = array();
  $items['admin/config/project_browser/main-settings'] = array(
    'title' => 'Server Settings',
    'description' => 'Set the various Project Browser Settings here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_browser_admin'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
  );
  $items['admin/modules/project_browser/filters/%'] = array(
    'title' => 'Filters Settings',
    'description' => 'Set up the Filters Here',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('project_browser_filters_admin', 4),
    'access arguments' => array('access administration pages'),
    'type' => MENU_LOCAL_ACTION,
    'context' => MENU_CONTEXT_INLINE,
  );
  
  $items['admin/modules/project_browser'] = array(
    'title' => 'Project Browser',
    'description' => 'Browse and search for new modules',
    'page callback' => 'project_browser_page',
    'page arguments' => array('module'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
  );
  
  $items['admin/modules/project_browser/modules'] = array(
    'title' => 'Modules',
    'description' => 'Browse and search for new modules',
    'page callback' => 'project_browser_page',
    'page arguments' => array('module'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );
  
  $items['admin/modules/project_browser/themes'] = array(
    'title' => 'Themes',
    'description' => 'Browse and search for new themes',
    'page callback' => 'project_browser_page',
    'page arguments' => array('theme'),
    'access arguments' => array('use project browser'),
    'file' => 'project_browser.pages.inc',
    'type' => MENU_LOCAL_TASK,
  );
  
  $items['admin/modules/project_browser/install/%'] = array(
    'title' => 'Install',
    'page callback' => 'project_browser_installation_page',
    'page arguments' => array(4),
    'access arguments' => array('use project browser'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'project_browser.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_menu_local_tasks_alter().
 * 
 * This is used to put the 'Project Browser' action on the 'Modules' page
 */
function project_browser_menu_local_tasks_alter(&$data, $router_item, $root_path) {
  switch ($root_path) {
    case 'admin/modules':
      // Unset the install theme page
      foreach ($data['actions']['output'] as $num => $item) {
        if ($item['#link']['path'] == 'admin/modules/install') {
          unset($data['actions']['output'][$num]);
        }
      }
      $item = menu_get_item('admin/modules/project_browser/modules');
      if ($item['access']) {
        $item['title'] = t('Install new modules');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
    case 'admin/modules/project_browser':
    case 'admin/modules/project_browser/modules':
    case 'admin/modules/project_browser/themes':
      $item = menu_get_item('admin/modules/install');
      if ($item['access']) {
        $item['title'] = t('Install manually');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
    case 'admin/appearance':
      // Unset the install theme page
      foreach ($data['actions']['output'] as $num => $item) {
        if ($item['#link']['path'] == 'admin/appearance/install') {
          unset($data['actions']['output'][$num]);
        }
      }
      $item = menu_get_item('admin/modules/project_browser/themes');
      if ($item['access']) {
        $item['title'] = t('Install new themes');
        $data['actions']['output'][] = array(
          '#theme' => 'menu_local_action',
          '#link' => $item,
        );
      }
      break;
  }
}

// ======================================
// Administration Page:
// ======================================

/**
 * Admin Settings Form
 */
function project_browser_admin() {
  $form['main'] = array(
    '#type' => 'fieldset',
    '#title' => t('Main Settings'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    );
  $form['main']['project_browser_servers'] = array(
    '#type' => 'textarea',
    '#title' => t('Servers'),
    '#default_value' => variable_get('project_browser_servers', ''),
    '#description' => t("Add new servers to use for the Project Browser, one per line, in 
      the 'url|Server Name' format. Drupal.org is added by default, and doesn't need to be 
      set here."),
    '#required' => FALSE,
  );

  return system_settings_form($form);
}

/**
 * Admin Settings Form
 */
function project_browser_filters_admin($form, &$form_state, $type) {
  if ($categories = project_browser_get_categories($type)) {
    $form['categories'] = array(
      '#type' => 'fieldset',
      '#title' => t('Categories'),
      '#collapsible' => FALSE,
      '#collapsed' => FALSE,
    );
    $form['categories']['project_browser_condensed_categories_' . $type] = array(
      '#type' => 'checkboxes',
      '#title' => t('Displayed Categories'),
      '#options' => $categories,
      '#default_value' => variable_get('project_browser_condensed_categories_' . $type, array()),
    );
  }

  return system_settings_form($form);
}

/**
 * Implementation of hook_forms()
 * 
 * We need this so that the install checkboxes will work
 */
function project_browser_forms() {
  $forms = array();
  
  $projects = project_browser_get_listed_projects();
  foreach ($projects as $project) {
    $forms['project_browser_' . $project['name'] . '_install_form'] = array(
      'callback' => 'project_browser_install_form',
      'callback_arguments' => array($project['name'], $project),
      'file' => 'project_browser.inc',
    );
  }
  
  return $forms;
}

// ======================================
// Theme:
// ======================================

/**
 * Implements hook_theme() 
 */
function project_browser_theme() {
  return array(
    // Template for installation page
    'project_browser_install' => array(
      'variables' => array('current_task' => NULL, 'main_content' => NULL),
      'template' => 'project_browser_install',
    ),
    // Template for list of projects
    'project_browser_list' => array(
      'variables' => array('projects_list' => NULL, 'type' => NULL),
      'template' => 'project_browser_list',
    ),
    // Template for list of projects
    'project_browser_block' => array(
      'render element' => 'element',
      'template' => 'project_browser_block',
    ),
    // Template for single project
    'project_browser_project' => array(
      'variables' => array('project' => NULL, 'first' => NULL),
      'template' => 'project_browser_project',
    ),
    // Template for install queue item
    'project_browser_install_queue' => array(
      'variables' => array('projects' => NULL),
      'template' => 'project_browser_install_queue',
    ),
  );
}

/**
 * Add some variables for the projects install theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - current_task : the current task
 */
function project_browser_preprocess_project_browser_install(&$variables) {
  // Add the themed list
  $variables['task_list'] = project_browser_installation_task_list($variables['current_task']);
}

/**
 * Add some variables for the projects install queue theme
 */
function project_browser_preprocess_project_browser_install_queue(&$variables) {
  $queue_html = '';
  if (empty($variables['projects'])) {
    $queue_html .= t('Install queue is empty.');
  }
  else {
    $queue_html .= drupal_render(drupal_get_form('project_browser_install_queue_form'));
    $queue_html .= "<div class='project-browser-install-link'>";
    $queue_html .= drupal_render(drupal_get_form('project_browser_install_button_form'));
    $queue_html .= "</div>";
  }
  
  // Add the install button
  $variables['queue_html'] = $queue_html;
}

/**
 * Add some variables for the project browser block theme
 * 
 * @param $variables
 */
function project_browser_preprocess_project_browser_block(&$variables) {
  // Add the title and content variables
  $variables['title'] = $variables['element']['title'];
  $variables['content'] = $variables['element']['content'];
}

/**
 * Add some variables for the projects list theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - projects_list : array of all projects
 */
function project_browser_preprocess_project_browser_list(&$variables) {
  drupal_add_css(drupal_get_path('module', 'project_browser') . '/project_browser.css');
  
  if (is_array($variables['projects_list']) AND !empty($variables['projects_list'])) {
    $content = '';
    $first = TRUE;
    // Theme each individual project and add to the list
    foreach ($variables['projects_list'] as $project) {
      $content .= theme('project_browser_project', array('project' => $project, 'first' => $first));
      $first = FALSE;
    }
  }
  else {
    $content = t('No results found.');
  }
  
  switch ($variables['type']) {
    case 'module':
      $title = t('Modules');
      break;
    case 'theme':
      $title = t('Themes');
      break;
    default:
      $title = t('Projects');
      break;
  }
  
  $main_content['project_browser_main_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => $title, 
    'content' => $content,
    '#contextual_links' => array(
      'project_browser' => array('admin/config/project_browser/main-settings', array()),
    ),
  );
  $variables['main_content'] = render($main_content);
  
  // Add the pager
  $variables['pager'] = theme('pager', array('tags' => NULL));
  
  // Add the filters
  $filters['project_browser_filters_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => t('Filters'), 
    'content' => drupal_render(drupal_get_form('project_browser_filters_form', $variables['type'])),
    '#contextual_links' => array(
      'project_browser_filters' => array('admin/modules/project_browser/filters', array($variables['type'])),
    ),
  );
  $variables['filters'] = render($filters);
  
  // Add the install list
  $install_list['project_browser_filters_block'] = array(
    '#theme' => 'project_browser_block',
    'title' => t('Install queue'), 
    'content' => project_browser_get_install_list(),
  );
  $variables['install_list'] = render($install_list);
}

/**
 * Add some variables for the project theme
 * 
 * @param $variables
 *   An associative array containing:
 *     - project : associative array of project variables
 */
function project_browser_preprocess_project_browser_project(&$variables) {
  $project = $variables['project'];
  
  $variables['title'] = l(check_plain($project['title']), check_url($project['project url']));
  $variables['author'] = t('Author: @author', array('@author' => $project['author']));
  $variables['description'] = _filter_htmlcorrector(filter_xss($project['description']));
  $variables['image'] = $project['image'];
  $variables['last_updated'] = ($project['last updated']) ? t('Last Updated: @date', array('@date' => format_date($project['last updated'], 'long'))) : '';
  
  $extras = array();
  
  if ($project['maintenance status']) {
    $extras[] = check_plain($project['maintenance status']);
  }
  if ($project['development status']) {
    $extras[] = check_plain($project['development status']);
  }
  if ($project['usage'] AND is_numeric($project['usage'])) {
    $extras[] = format_plural($project['usage'], '1 Download', '@count Downloads');
  }
  if ($project['rating']) {
    $extras[] = check_plain($project['rating']);
  }
  
  $variables['extras'] = implode(' | ', $extras);
  
  // Check if the project is installed
  if (_project_browser_is_project_enabled($project['type'], $project['name'])) {
    $variables['status'] = '<div class="install-disabled">Already installed</div>'; 
    $variables['install'] = '';
  }
  elseif (drupal_get_filename($project['type'], $project['name'])) {
    $variables['status'] = '<div class="install-disabled">Already downloaded</div>';
    $variables['install'] = '';
  }
  else {
    $variables['status'] = '';
    $install_form = drupal_get_form('project_browser_' . $project['name'] . '_install_form', $project);
    $variables['install'] = drupal_render($install_form);
  }
}